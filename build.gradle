// tasks: spotbugsMain, spotbugsTest, spotbugsIntegrationTest or "check" for all
plugins {
	id 'java-library'
	id "io.spring.dependency-management" version "1.1.7"
	id "com.github.spotbugs" version "6.4.2"
	// ./gradlew dependencyUpdates
	id "com.github.ben-manes.versions" version "0.52.0"
	id 'com.github.node-gradle.node' version '5.0.0'
	id 'war'
	id "org.springframework.boot" version "3.5.5"
	id "checkstyle"
	// run jacoco via gradle jacocoTestReport, report in build/reports
	id 'jacoco'
}

group = 'org.tightblog'
version = '4.1.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(25)
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
	mavenCentral()
}

sourceSets {
	test {
		java {
			srcDir 'src/test/java'
			exclude '**/*IT.java'
		}
	}
	// https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/test/java')
//			include '**/UserManagerIT.java'
			include '**/*IT.java'
		}
		resources.srcDir file('src/test/resources')
	}
}

static def standardCompile(options) {
    options.compilerArgs += ["-proc:none", "-Xlint:unchecked"]
}

compileJava {
    standardCompile(options)
}

compileTestJava {
    standardCompile(options)
}

compileIntegrationTestJava {
    standardCompile(options)
}

project.ext.buildNumber = java.time.Instant.now().getEpochSecond()

def standardProcessResources(obj) {
    obj.filesMatching(['application.properties', 'application-tbcustom.properties']) {
        expand(version: version,
               buildNumber: buildNumber,
               buildDir: buildDir
        )
    }
}

processResources {
    standardProcessResources(processResources)
}

processTestResources {
    standardProcessResources(processTestResources)
}

processIntegrationTestResources {
    standardProcessResources(processIntegrationTestResources)
}

configurations {
	integrationTestImplementation.extendsFrom implementation, testImplementation
	integrationTestRuntimeOnly.extendsFrom runtimeOnly
	// using log4j2 instead of logback
	// global excludes: http://mrhaki.blogspot.com/2012/10/gradle-goodness-exclude-transitive.html
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

task integrationTest(type: Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
	mustRunAfter test
    useJUnitPlatform()
}

check.dependsOn integrationTest

spotbugs {
	excludeFilter = file("$rootProject.projectDir/etc/buildconfig/spotbugsExcludes.xml")
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-mail')
	implementation('org.springframework.boot:spring-boot-starter-log4j2')
	implementation('org.springframework.boot:spring-boot-starter-validation')
	implementation('org.springframework.security:spring-security-taglibs')
	implementation('org.apache.commons:commons-lang3:3.13.0')
	implementation('org.apache.commons:commons-text:1.10.0')
	implementation('org.apache.lucene:lucene-analyzers-common:8.6.2')
	implementation('org.apache.lucene:lucene-queryparser:8.6.2')
	implementation('javax.servlet:jstl:1.2')
	implementation('commons-validator:commons-validator:1.7')
	implementation('org.jsoup:jsoup:1.16.1')
	implementation('com.github.ben-manes.caffeine:caffeine:3.1.8')
	implementation('org.jboss.aerogear:aerogear-otp-java:1.0.0')
	implementation('com.atlassian.commonmark:commonmark:0.17.0')
	implementation('commons-fileupload:commons-fileupload:1.5')
	implementation('org.apache.derby:derbyclient:10.17.1.0')
	implementation("io.nayuki:qrcodegen:1.8.0")

	testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.junit.jupiter:junit-jupiter:5.10.2')

	runtimeOnly('org.apache.derby:derby:10.17.1.0')
    integrationTestRuntimeOnly 'org.apache.derby:derby:10.17.1.0'

	// PostgreSQL JDBC jar, can remove if using other databases.
	runtimeOnly('org.postgresql:postgresql')

	providedCompile('org.apache.tomcat.embed:tomcat-embed-jasper:9.0.11')
	// https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

def uiDir = 'src/client3'

node {
	version = '20.19.0'
	npmVersion = '10.5.0'
	download = true
	// distBaseUrl = Custom artifactory location here for node/npm.
}

task npmInstallBloggerUI(type: NpmTask) {
	args = ['install']
	execOverrides {
		it.workingDir = uiDir
	}
}

task npmBuildBloggerUI(type: NpmTask) {
	dependsOn npmInstallBloggerUI
	args = ['run','build']
	execOverrides {
		it.workingDir = uiDir
	}
}

task deleteUi(type: Delete) {
  delete 'src/main/webapp/tb-ui'
  followSymlinks = false
}

task copyUi(type: Copy) {
	dependsOn npmBuildBloggerUI
	into "src/main/webapp"

	into("tb-ui") {
		from "${uiDir}/dist"
	}
}

test {
    useJUnitPlatform()
}

war {
	enabled = true
}

war.dependsOn copyUi
copyUi.dependsOn deleteUi
bootWar.dependsOn copyUi
